var analytesDict = {
	"Alkalinity":{
		"control":"alkalinity-check"
	},
	"Conductivity":{
		"control":"conductivity-check"
	},
	"Copper":{
		"control":"copper-check"
	},
	"Free_Chlorine":{
		"control":"free_chlorine-check"
	},
	"Hardness":{
		"control":"hardness-check"
	},	
	"Iron":{
		"control":"iron-check"
	},		
	"Lead":{
		"control":"lead-check"
	},	
	"Manganese":{
		"control":"manganese-check"
	},		
	"Nitrate":{
		"control":"nitrate-check"
	},		
	"Nitrite":{
		"control":"nitrite-check"
	},	
	"Orthophosphate":{
		"control":"orthophosphate-check"
	},	
	"ORP":{
		"control":"orp-check"
	},	
	"pH":{
		"control":"pH-check"
	},
	"Temperature":{
		"control":"temp-check"
	},
	"Total_Chlorine":{
		"control":"total_chlorine-check"
	},
	"E.Coli":{
		"control":"e.coli-check"
	},
	"Total_Coliform":{
		"control":"total_coliform-check"
	},
	"Total_Dissolved_Solids":{
		"control":"total_dissolved_solids-check"
	},
	"Total_Haloacetic_Acids":{
		"control":"total_haloacetic_acids-check"
	},
	"Total_Trihalomethanes":{
		"control":"total_trihalomethanes-check"
	},
	"Turbidity":{
		"control":"turbidity-check"
	}
}

var riskbyIndexCalcDict = {}
var riskMaxCalcDict = {}
var analyteIndices = new Set()


$.getJSON("js/documents/VulnerabilityCalculation.json", function(json) {
	for (var i = 0; i < Object.keys(analytesDict).length; i++) {
		var analyte = Object.keys(analytesDict)[i]
		analytesDict[analyte]["calculation"] = json["AnalysisParams"][analyte]["calculation"]
		analytesDict[analyte]["threshold"] = json["AnalysisParams"][analyte]["threshold"]
		analytesDict[analyte]["weight"] = json["AnalysisParams"][analyte]["weight"]
	}
}).fail(function (jqxhr, status, error) { 
console.log('error', status, error) }
);

function describeParamsinPopUp(){
	document.getElementById('myPopup').classList.toggle('show');
	document.getElementById("myPopup").innerHTML = "Analyte:Normalized = Score is normalized between 0 and 100.<br>"+
	"Analyte:Boolean = Score is 0 if analyte is 0, Score is 100 if analyte is 1.<br>"+
	"Analyte:[x,y] = Score is 0 if analyte <= x, Score is 50 if analyte > x and < y, Score is 100 if analyte >= y.<br>"+
	"Analyte:R[x,y] = Score is 100 if analyte <= x, Score is 50 if analyte > x and < y, Score is 0 if analyte >= y."
}

function getEquation(){
	
	var totalweight = 0
	for (var i = 0; i < Object.keys(riskbyIndexCalcDict).length; i++) {
		totalweight += analytesDict[Object.keys(riskbyIndexCalcDict)[i]]["weight"]
	}
	
	var equationString = "Score = 1/"+String(totalweight)+"*("
	for (var i = 0; i < Object.keys(riskbyIndexCalcDict).length; i++) {
		calculation = analytesDict[Object.keys(riskbyIndexCalcDict)[i]]["calculation"]
		threshold = analytesDict[Object.keys(riskbyIndexCalcDict)[i]]["threshold"]
		weight = analytesDict[Object.keys(riskbyIndexCalcDict)[i]]["weight"]
		analyteHeader = Object.keys(riskbyIndexCalcDict)[i]
		
		if(calculation == "Threshold"){
			equationString += String(weight)+"*"+analyteHeader+":["+threshold+"] + "
		}else if(calculation == "Reverse"){
			equationString += String(weight)+"*"+analyteHeader+":R["+threshold+"] + "
		}else{
			equationString += String(weight)+"*"+analyteHeader+":["+calculation+"] + "
		}
		
	}
	
	document.getElementById('equation').innerHTML = equationString.substring(0, equationString.length-2)+")";;
}


function assignCalcIndices(headers) {
	riskbyIndexCalcDict = {}
	for (var i = 0; i < headers.length; i++) {
		if(Object.keys(analytesDict).includes(headers[i])){
			if(document.getElementById(analytesDict[headers[i]]["control"]).checked){
				riskbyIndexCalcDict[headers[i]] = i
			}
		}
	}
	
	analyteIndices = new Set()
	for (var j = 0; j < Object.keys(riskbyIndexCalcDict).length; j++) {
		analyteIndices.add(riskbyIndexCalcDict[Object.keys(riskbyIndexCalcDict)[j]])
	}
	
	getEquation()
}

function getMaxAnalyteValues() {
	
	var analyteHeaders = Object.keys(riskbyIndexCalcDict)
	for (var i = 0; i < analyteHeaders.length; i++) {
		riskMaxCalcDict[analyteHeaders[i]] = {"array":[],"max":0,"min":0}	
	}
	
	for (var count = 1; count < rawCSVArray.length; count++) {
		var row = rawCSVArray[count]
		for (var i = 0; i < analyteHeaders.length; i++) {
			analyteValue = parseFloat(row[riskbyIndexCalcDict[analyteHeaders[i]]])
			if(Number.isFinite(analyteValue)){
				riskMaxCalcDict[analyteHeaders[i]]["array"].push(analyteValue)
			}
		}
	}
	
	for (var i = 0; i < analyteHeaders.length; i++) {
		riskMaxCalcDict[analyteHeaders[i]]["max"] = Math.max(...riskMaxCalcDict[analyteHeaders[i]]["array"])
		riskMaxCalcDict[analyteHeaders[i]]["min"] = Math.min(...riskMaxCalcDict[analyteHeaders[i]]["array"])
	}
	
}

function assignInitialChecks(){
	
	//Reset all checks prior to setting them
	for (var i = 0; i < Object.keys(analytesDict).length; i++){
		var check = analytesDict[Object.keys(analytesDict)[i]]["control"]
		document.getElementById(check).checked = false
	}
	
	//Set initial checks based on the csv headers
	var headersToCheck = rawCSVArray[0];
	for (var i = 0; i < headersToCheck.length; i++) {
		if(Object.keys(analytesDict).includes(headersToCheck[i])){
			document.getElementById(analytesDict[headersToCheck[i]]["control"]).checked = true
			document.getElementById(analytesDict[headersToCheck[i]]["control"]).style["background-color"] = "blue"
			document.getElementById(analytesDict[headersToCheck[i]]["control"]).style["box-shadow"] = "0px 0px 1px 1px rgba(0,37,255,1)"

			//console.log("Checked "+String(analytesDict[headersToCheck[i]]["control"]))
		}
	}
}


function calculateRisk(row) {
	var risk = 0
	var totalweight = 0
	var analyteHeaders = Object.keys(riskbyIndexCalcDict)
	for (var i = 0; i < analyteHeaders.length; i++) {
		analyteValue = parseFloat(row[riskbyIndexCalcDict[analyteHeaders[i]]])
		calculation = analytesDict[analyteHeaders[i]]["calculation"]
		weight = analytesDict[analyteHeaders[i]]["weight"]
		thresholdRange = analytesDict[analyteHeaders[i]]["threshold"]
		if(Number.isFinite(analyteValue)){
			var analyteRisk = 0
			if(calculation == "Normalized"){
				var maxNorm = riskMaxCalcDict[analyteHeaders[i]]["max"]
				var minNorm = riskMaxCalcDict[analyteHeaders[i]]["min"]
				analyteRisk = 100*(analyteValue - minNorm) / (maxNorm - minNorm)
			}else if(calculation == "Boolean"){
				if(analyteValue==0){
					analyteRisk = 0
				}else{
					analyteRisk = 100
				}
			}else if(calculation == "Threshold"){
				if(analyteValue <= thresholdRange[0]){
					analyteRisk = 0
				}else if(analyteValue > thresholdRange[0] && analyteValue < thresholdRange[1]){
					analyteRisk = 50
				}else if(analyteValue >= thresholdRange[1]){
					analyteRisk = 100
				}
			}else if(calculation == "Reverse"){
				if(analyteValue <= thresholdRange[0]){
					analyteRisk = 100
				}else if(analyteValue > thresholdRange[0] && analyteValue < thresholdRange[1]){
					analyteRisk = 50
				}else if(analyteValue >= thresholdRange[1]){
					analyteRisk = 0
				}
			}
			risk += analyteRisk*weight
			totalweight += weight
		}else{
			return null
		}
	}
	return round(risk/totalweight)
}

function round(number) {
	return Math.round(number * 100) / 100
}

function assignRiskStops(geoJSON) {

	var riskArray = []
	for (var i = 0; i < geoJSON["features"].length; i++){
		if(geoJSON["features"][i]["properties"]["Mean Vulnerability Score"]){
			riskArray.push(geoJSON["features"][i]["properties"]["Mean Vulnerability Score"])
		}
	}
	
	var min = round(Math.min.apply(Math, riskArray))
	var max = round(Math.max.apply(Math, riskArray))
	var mid = round((max - min)/2+min)
	
	//console.log([min,mid,max])
	editRiskLegend([min,mid,max])
	

	return {property: 'Mean Vulnerability Score',stops: [[min, "blue"],[mid, "orchid"],[max, "red"],]}
}

function editRiskLegend(stops) {
	document.getElementById('minLegend').innerHTML = "Low scores near "+String(stops[0]);
	document.getElementById('midLegend').innerHTML = "Medium scores near "+String(stops[1]);
	document.getElementById('maxLegend').innerHTML = "High scores near "+String(stops[2]);
}

function calculateMedian(values){
	values.sort(function(a,b){
  	return a-b;
  });
  var half = Math.floor(values.length / 2);
  
  if (values.length % 2)
  	return values[half];
  else
  	return (values[half - 1] + values[half]) / 2.0;
}

function summaryStats(riskArray) {

	var n = riskArray.length
	var mean = riskArray.reduce((a, b) => a + b) / n
	var median = calculateMedian(riskArray)
	var stdev = Math.sqrt(riskArray.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)
	var skew = 3*(mean-median)/stdev

	document.getElementById('count-stat').innerHTML = String(round(n));
	document.getElementById('mean-stat').innerHTML = String(round(mean));
	document.getElementById('median-stat').innerHTML = String(round(median));
	document.getElementById('stdev-stat').innerHTML = String(round(stdev));
	document.getElementById('skew-stat').innerHTML = String(round(skew));

}




