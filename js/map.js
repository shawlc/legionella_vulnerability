
var tileset = 'examples.map-i86nkdio';
var map = new mapboxgl.Map({
  container: 'map', // container id
  style: 'mapbox://styles/mapbox/light-v10', // stylesheet location
  center: [-86.50, 39], // starting position
  zoom: 3.5 // starting zoom
});

map.addControl(new mapboxgl.ScaleControl(), "bottom-left");
map.addControl(new mapboxgl.NavigationControl(),"bottom-left");

var zoomToFeat = function(featureCollection) {

        var coordinates = [];
		
		for (var i = 0; i < featureCollection["features"].length; i++){
			coordinates.push(featureCollection["features"][i]["geometry"]["coordinates"])
		}
        var bounds = coordinates.reduce(function(bounds, coord) {
            return bounds.extend(coord);
        }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));

        map.fitBounds(bounds, {
            padding: 20
        });
		
		//console.log(bounds)
    };

var zoomToFeatLine = function(featureCollection) {

        var coordinates = [];
		
		for (var i = 0; i < featureCollection["features"].length; i++){
			coordinates.push(featureCollection["features"][i]["geometry"]["coordinates"][0])
		}
        var bounds = coordinates.reduce(function(bounds, coord) {
            return bounds.extend(coord);
        }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));

        map.fitBounds(bounds, {
            padding: 20
        });
		
		//console.log(bounds)
    };

function visualizeWQData() {
	if (countChecked() != 0){
		if (map.getLayer("WaterQualityData")) {
			map.removeLayer("WaterQualityData");
		}
		
		if (map.getSource("WaterQualityData")) {
		map.removeSource("WaterQualityData");
		}
		map.once('sourcedata', () => {
			map.addSource('WaterQualityData', {
						'type': 'geojson',
						'data': csvGeoJson
						});
			map.addLayer({
						'id': 'WaterQualityData',
						'type': 'circle',
						'source': 'WaterQualityData',
						'paint': {
						'circle-radius': 6,
						'circle-color': assignRiskStops(csvGeoJson),
						"circle-stroke-color": "black",
						"circle-stroke-width": 1
						}
						});
			zoomToFeat(csvGeoJson)
		})
		console.log("Mapped WQ data")		
	}else{
		console.log("No analytes checked")
		map.removeLayer("WaterQualityData");
		map.removeSource("WaterQualityData");
	}

}




var distLegendTargets = {}

var distLegend = new watergis.MapboxLegendControl(distLegendTargets, {
        showDefault: true, 
        showCheckbox: true, 
        onlyRendered: false,
        reverseOrder: false
    })

/*
map.on('load', () => {
	// Load an image from an external URL.
	for (var i = 0; i < Object.keys(symbology).length; i++) {
		symkey = Object.keys(symbology)[i]
		if(symbology[symkey].type == "image"){
			//map.loadImage(symbology[symkey].url,(error, image) => {if (error) throw error;map.addImage(symkey, image);});	
			
			map.addImage(symkey, {width:194, height:196, data:symbology[symkey].url});	

		}		
	}

});
*/
function visualizeDistData(layerName) {
	if (map.getLayer(layerName)) {
		map.removeLayer(layerName);
	}
	if (map.getSource(layerName)) {
    map.removeSource(layerName);
	}
	
	var layerSymbology = keyDistAssets[layerName]['symbology']
	layerSymbology.id = layerName
	layerSymbology.source = layerName
	
	distLegendTargets[layerName] = layerName

	map.once('sourcedata', () => {
		map.addSource(layerName, {
					'type': 'geojson',
					'data': keyDistAssets[layerName]['data']
					});
		map.addLayer(layerSymbology);
		try{
			zoomToFeat(keyDistAssets[layerName]['data'])
		}catch(e){
			console.log("Couldn't zoom to feature class. Trying again assuming polyline.")
			zoomToFeatLine(keyDistAssets[layerName]['data'])
		}
		
		
		map.removeControl(distLegend)
		distLegend = new watergis.MapboxLegendControl(distLegendTargets, {
			showDefault: true, 
			showCheckbox: true, 
			onlyRendered: false,
			reverseOrder: false
		})
		map.addControl(distLegend, 'top-left')
		console.log("Added layer to legend")
		
	})
	console.log("Mapped "+layerName)
}