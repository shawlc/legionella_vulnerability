var analysisParams = ['Free Chlorine', 'Total Chlorine', 'Temperature', 'pH', 'Total Coliform Results']
var weightsMatrix = [1,1,1,1,1]

function round(number) {
	return Math.round(number * 100) / 100
}

function validateWeightsMatrix() {
	var alertString = ""
	if (weightsMatrix.every(function(element) {return typeof element === 'number';})){
		if(weightsMatrix.length >= 5){
			return weightsMatrix
		}else{
			alertString += "Weights matrix has less than 5 elements. "
		}
	}else{
		alertString += "Weights matrix contains non-numbers. "
	}
	
	alertString += "Defaulting to [1,1,1,1,1] weights matrix"
	alert(alertString)
	return [1,1,1,1,1]
}

function calculateRisk(dataRow, weightsMatrix) {
	var sum = 0
	for (var i = 0; i < dataRow.length; i++){
		if(Number.isFinite(parseFloat(dataRow[i]))){
			sum += dataRow[i]*weightsMatrix[i]
		}
	}
	return Math.round(sum * 100) / 100
}

function assignRiskStops(geoJSON) {

	var riskArray = []
	for (var i = 0; i < geoJSON["features"].length; i++){
		riskArray.push(geoJSON["features"][i]["properties"]["Vulnerability_Score"])
	}
	
	var min = Math.min.apply(Math, riskArray)
	var max = Math.max.apply(Math, riskArray)
	var mid = (max - min)/2+min
	
	//console.log([min,mid,max])
	editRiskLegend([min,mid,max])

	return {property: 'Vulnerability_Score',stops: [[min, "green"],[mid, "yellow"],[max, "red"],]}
}

function editRiskLegend(stops) {
	document.getElementById('minLegend').innerHTML = "Low risk: Scores near "+String(stops[0]);
	document.getElementById('midLegend').innerHTML = "Medium risk: Scores near "+String(stops[1]);
	document.getElementById('maxLegend').innerHTML = "High risk: Scores near "+String(stops[2]);
}

function updateWeights(){
	try{

		weightsMatrix = JSON.parse(document.getElementById('inputmatrix').value)
	}catch(error){
		alert("Inputted weights matrix cannot be parsed into an array. Defaulting to [1,1,1,1,1] weights matrix")
	}
}


function describeParamsinPopUp(){
	document.getElementById('myPopup').classList.toggle('show');
	document.getElementById("myPopup").innerHTML = "Vulnerability Score = "+JSON.stringify(analysisParams)+" \u2022 Weights Matrix" 
}

var filterDict = {
	"Vulnerability_Score":{
		"id":"score",
		"list":[],
		"min":0,
		"max":100
	},
	"Free Chlorine":{
		"id":"freecl",
		"list":[],
		"min":0,
		"max":100
	},
	"Total Chlorine":{
		"id":"totalcl",
		"list":[],
		"min":0,
		"max":100
	},
	"Temperature":{
		"id":"temp",
		"list":[],
		"min":0,
		"max":100
	},
	"pH":{
		"id":"ph",
		"list":[],
		"min":0,
		"max":100
	},
	"Total Coliform Results":{
		"id":"coli",
		"list":[],
		"min":0,
		"max":100
	}
}

slider1 = document.getElementById('slider1')
slider2 = document.getElementById('slider2')
slider3 = document.getElementById('slider3')
slider4 = document.getElementById('slider4')
slider5 = document.getElementById('slider5')
slider6 = document.getElementById('slider6')


noUiSlider.create(slider1, {start: [0, 100],connect: true,range: {'min': 0,'max': 100}});
noUiSlider.create(slider2, {start: [0, 100],connect: true,range: {'min': 0,'max': 100}});
noUiSlider.create(slider3, {start: [0, 100],connect: true,range: {'min': 0,'max': 100}});
noUiSlider.create(slider4, {start: [0, 100],connect: true,range: {'min': 0,'max': 100}});
noUiSlider.create(slider5, {start: [0, 100],connect: true,range: {'min': 0,'max': 100}});
noUiSlider.create(slider6, {start: [0, 100],connect: true,range: {'min': 0,'max': 100}});

function calculateSlider(slider_value, param) {
	return slider_value/100.0*(filterDict[param]["max"]-filterDict[param]["min"])+filterDict[param]["min"]
}


slider1.noUiSlider.on('update', function (values, handle) {document.getElementById('score_'+String(handle)).innerHTML = Math.round(calculateSlider(values[handle], "Vulnerability_Score") * 100) / 100});
slider2.noUiSlider.on('update', function (values, handle) {document.getElementById('freecl_'+String(handle)).innerHTML = Math.round(calculateSlider(values[handle], "Free Chlorine") * 100) / 100});
slider3.noUiSlider.on('update', function (values, handle) {document.getElementById('totalcl_'+String(handle)).innerHTML = Math.round(calculateSlider(values[handle], "Total Chlorine") * 100) / 100});
slider4.noUiSlider.on('update', function (values, handle) {document.getElementById('temp_'+String(handle)).innerHTML = Math.round(calculateSlider(values[handle], "Temperature") * 100) / 100});
slider5.noUiSlider.on('update', function (values, handle) {document.getElementById('ph_'+String(handle)).innerHTML = Math.round(calculateSlider(values[handle], "pH") * 100) / 100});
slider6.noUiSlider.on('update', function (values, handle) {document.getElementById('coli_'+String(handle)).innerHTML = Math.round(calculateSlider(values[handle], "Total Coliform Results") * 100) / 100});


function assignParamRanges(geoJSON) {


	for (var i = 0; i < Object.keys(filterDict).length; i++){
		
		paramKey = Object.keys(filterDict)[i]
		filterDict[paramKey]["list"] = []
		
		for (var j = 0; j < geoJSON["features"].length; j++){
			filterDict[paramKey]["list"].push(geoJSON["features"][j]["properties"][paramKey])
		}
		
		filterDict[paramKey]["min"] = Math.min.apply(Math, filterDict[paramKey]["list"])
		filterDict[paramKey]["max"] = Math.max.apply(Math, filterDict[paramKey]["list"])
		
		document.getElementById(filterDict[paramKey]["id"]+"_0").innerHTML = filterDict[paramKey]["min"]
		document.getElementById(filterDict[paramKey]["id"]+"_1").innerHTML = filterDict[paramKey]["max"]
		
	}
}